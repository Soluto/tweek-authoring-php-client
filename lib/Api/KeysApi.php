<?php
/**
 * KeysApi
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Authoring API
 *
 * API used to query and manipulate Tweek data in git
 *
 * OpenAPI spec version: 0.2.2
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Api;

use \Swagger\Client\ApiClient;
use \Swagger\Client\ApiException;
use \Swagger\Client\Configuration;
use \Swagger\Client\ObjectSerializer;

/**
 * KeysApi Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class KeysApi
{
    /**
     * API Client
     *
     * @var \Swagger\Client\ApiClient instance of the ApiClient
     */
    protected $apiClient;

    /**
     * Constructor
     *
     * @param \Swagger\Client\ApiClient|null $apiClient The api client to use
     */
    public function __construct(\Swagger\Client\ApiClient $apiClient = null)
    {
        if ($apiClient === null) {
            $apiClient = new ApiClient();
        }

        $this->apiClient = $apiClient;
    }

    /**
     * Get API client
     *
     * @return \Swagger\Client\ApiClient get the API client
     */
    public function getApiClient()
    {
        return $this->apiClient;
    }

    /**
     * Set the API client
     *
     * @param \Swagger\Client\ApiClient $apiClient set the API client
     *
     * @return KeysApi
     */
    public function setApiClient(\Swagger\Client\ApiClient $apiClient)
    {
        $this->apiClient = $apiClient;
        return $this;
    }

    /**
     * Operation deleteKey
     *
     * @param string $key_path  (required)
     * @param string $author_name  (required)
     * @param string $author_email  (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return string
     */
    public function deleteKey($key_path, $author_name, $author_email)
    {
        list($response) = $this->deleteKeyWithHttpInfo($key_path, $author_name, $author_email);
        return $response;
    }

    /**
     * Operation deleteKeyWithHttpInfo
     *
     * @param string $key_path  (required)
     * @param string $author_name  (required)
     * @param string $author_email  (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of string, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteKeyWithHttpInfo($key_path, $author_name, $author_email)
    {
        // verify the required parameter 'key_path' is set
        if ($key_path === null) {
            throw new \InvalidArgumentException('Missing the required parameter $key_path when calling deleteKey');
        }
        // verify the required parameter 'author_name' is set
        if ($author_name === null) {
            throw new \InvalidArgumentException('Missing the required parameter $author_name when calling deleteKey');
        }
        // verify the required parameter 'author_email' is set
        if ($author_email === null) {
            throw new \InvalidArgumentException('Missing the required parameter $author_email when calling deleteKey');
        }
        // parse inputs
        $resourcePath = "/key";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['text/html']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // query params
        if ($key_path !== null) {
            $queryParams['keyPath'] = $this->apiClient->getSerializer()->toQueryValue($key_path);
        }
        // query params
        if ($author_name !== null) {
            $queryParams['author.name'] = $this->apiClient->getSerializer()->toQueryValue($author_name);
        }
        // query params
        if ($author_email !== null) {
            $queryParams['author.email'] = $this->apiClient->getSerializer()->toQueryValue($author_email);
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams,
                'string',
                '/key'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, 'string', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), 'string', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation listKeys
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return string[]
     */
    public function listKeys()
    {
        list($response) = $this->listKeysWithHttpInfo();
        return $response;
    }

    /**
     * Operation listKeysWithHttpInfo
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of string[], HTTP status code, HTTP response headers (array of strings)
     */
    public function listKeysWithHttpInfo()
    {
        // parse inputs
        $resourcePath = "/keys";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);


        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                'string[]',
                '/keys'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, 'string[]', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), 'string[]', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation listManifests
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return object[]
     */
    public function listManifests()
    {
        list($response) = $this->listManifestsWithHttpInfo();
        return $response;
    }

    /**
     * Operation listManifestsWithHttpInfo
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of object[], HTTP status code, HTTP response headers (array of strings)
     */
    public function listManifestsWithHttpInfo()
    {
        // parse inputs
        $resourcePath = "/manifests";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);


        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                'object[]',
                '/manifests'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, 'object[]', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), 'object[]', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation getDependents
     *
     * @param string $key_path  (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return object
     */
    public function getDependents($key_path)
    {
        list($response) = $this->getDependentsWithHttpInfo($key_path);
        return $response;
    }

    /**
     * Operation getDependentsWithHttpInfo
     *
     * @param string $key_path  (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of object, HTTP status code, HTTP response headers (array of strings)
     */
    public function getDependentsWithHttpInfo($key_path)
    {
        // verify the required parameter 'key_path' is set
        if ($key_path === null) {
            throw new \InvalidArgumentException('Missing the required parameter $key_path when calling getDependents');
        }
        // parse inputs
        $resourcePath = "/dependent";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // query params
        if ($key_path !== null) {
            $queryParams['keyPath'] = $this->apiClient->getSerializer()->toQueryValue($key_path);
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                'object',
                '/dependent'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, 'object', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), 'object', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation getKey
     *
     * @param string $key_path  (required)
     * @param string $revision  (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return object
     */
    public function getKey($key_path, $revision = null)
    {
        list($response) = $this->getKeyWithHttpInfo($key_path, $revision);
        return $response;
    }

    /**
     * Operation getKeyWithHttpInfo
     *
     * @param string $key_path  (required)
     * @param string $revision  (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of object, HTTP status code, HTTP response headers (array of strings)
     */
    public function getKeyWithHttpInfo($key_path, $revision = null)
    {
        // verify the required parameter 'key_path' is set
        if ($key_path === null) {
            throw new \InvalidArgumentException('Missing the required parameter $key_path when calling getKey');
        }
        // parse inputs
        $resourcePath = "/key";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // query params
        if ($key_path !== null) {
            $queryParams['keyPath'] = $this->apiClient->getSerializer()->toQueryValue($key_path);
        }
        // query params
        if ($revision !== null) {
            $queryParams['revision'] = $this->apiClient->getSerializer()->toQueryValue($revision);
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                'object',
                '/key'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, 'object', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), 'object', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation getKeyRevisionHistory
     *
     * @param string $key_path  (required)
     * @param string $since  (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return object[]
     */
    public function getKeyRevisionHistory($key_path, $since)
    {
        list($response) = $this->getKeyRevisionHistoryWithHttpInfo($key_path, $since);
        return $response;
    }

    /**
     * Operation getKeyRevisionHistoryWithHttpInfo
     *
     * @param string $key_path  (required)
     * @param string $since  (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of object[], HTTP status code, HTTP response headers (array of strings)
     */
    public function getKeyRevisionHistoryWithHttpInfo($key_path, $since)
    {
        // verify the required parameter 'key_path' is set
        if ($key_path === null) {
            throw new \InvalidArgumentException('Missing the required parameter $key_path when calling getKeyRevisionHistory');
        }
        // verify the required parameter 'since' is set
        if ($since === null) {
            throw new \InvalidArgumentException('Missing the required parameter $since when calling getKeyRevisionHistory');
        }
        // parse inputs
        $resourcePath = "/revision-history";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // query params
        if ($key_path !== null) {
            $queryParams['keyPath'] = $this->apiClient->getSerializer()->toQueryValue($key_path);
        }
        // query params
        if ($since !== null) {
            $queryParams['since'] = $this->apiClient->getSerializer()->toQueryValue($since);
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                'object[]',
                '/revision-history'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, 'object[]', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), 'object[]', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation getManifest
     *
     * @param string $key_path  (required)
     * @param string $revision  (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return object
     */
    public function getManifest($key_path, $revision = null)
    {
        list($response) = $this->getManifestWithHttpInfo($key_path, $revision);
        return $response;
    }

    /**
     * Operation getManifestWithHttpInfo
     *
     * @param string $key_path  (required)
     * @param string $revision  (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of object, HTTP status code, HTTP response headers (array of strings)
     */
    public function getManifestWithHttpInfo($key_path, $revision = null)
    {
        // verify the required parameter 'key_path' is set
        if ($key_path === null) {
            throw new \InvalidArgumentException('Missing the required parameter $key_path when calling getManifest');
        }
        // parse inputs
        $resourcePath = "/manifest";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // query params
        if ($key_path !== null) {
            $queryParams['keyPath'] = $this->apiClient->getSerializer()->toQueryValue($key_path);
        }
        // query params
        if ($revision !== null) {
            $queryParams['revision'] = $this->apiClient->getSerializer()->toQueryValue($revision);
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                'object',
                '/manifest'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, 'object', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), 'object', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation getRevision
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return string
     */
    public function getRevision()
    {
        list($response) = $this->getRevisionWithHttpInfo();
        return $response;
    }

    /**
     * Operation getRevisionWithHttpInfo
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of string, HTTP status code, HTTP response headers (array of strings)
     */
    public function getRevisionWithHttpInfo()
    {
        // parse inputs
        $resourcePath = "/revision";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['text/html']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);


        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                'string',
                '/revision'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, 'string', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), 'string', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation updateKey
     *
     * @param string $key_path  (required)
     * @param string $author_name  (required)
     * @param string $author_email  (required)
     * @param \Swagger\Client\Model\KeyUpdateModel $new_key_model  (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return string
     */
    public function updateKey($key_path, $author_name, $author_email, $new_key_model)
    {
        list($response) = $this->updateKeyWithHttpInfo($key_path, $author_name, $author_email, $new_key_model);
        return $response;
    }

    /**
     * Operation updateKeyWithHttpInfo
     *
     * @param string $key_path  (required)
     * @param string $author_name  (required)
     * @param string $author_email  (required)
     * @param \Swagger\Client\Model\KeyUpdateModel $new_key_model  (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of string, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateKeyWithHttpInfo($key_path, $author_name, $author_email, $new_key_model)
    {
        // verify the required parameter 'key_path' is set
        if ($key_path === null) {
            throw new \InvalidArgumentException('Missing the required parameter $key_path when calling updateKey');
        }
        // verify the required parameter 'author_name' is set
        if ($author_name === null) {
            throw new \InvalidArgumentException('Missing the required parameter $author_name when calling updateKey');
        }
        // verify the required parameter 'author_email' is set
        if ($author_email === null) {
            throw new \InvalidArgumentException('Missing the required parameter $author_email when calling updateKey');
        }
        // verify the required parameter 'new_key_model' is set
        if ($new_key_model === null) {
            throw new \InvalidArgumentException('Missing the required parameter $new_key_model when calling updateKey');
        }
        // parse inputs
        $resourcePath = "/key";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['text/html']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // query params
        if ($key_path !== null) {
            $queryParams['keyPath'] = $this->apiClient->getSerializer()->toQueryValue($key_path);
        }
        // query params
        if ($author_name !== null) {
            $queryParams['author.name'] = $this->apiClient->getSerializer()->toQueryValue($author_name);
        }
        // query params
        if ($author_email !== null) {
            $queryParams['author.email'] = $this->apiClient->getSerializer()->toQueryValue($author_email);
        }
        // body params
        $_tempBody = null;
        if (isset($new_key_model)) {
            $_tempBody = $new_key_model;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams,
                'string',
                '/key'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, 'string', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), 'string', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }
}
