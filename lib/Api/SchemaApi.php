<?php
/**
 * SchemaApi
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Authoring API
 *
 * API used to query and manipulate Tweek data in git
 *
 * OpenAPI spec version: 0.2.2
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Api;

use \Swagger\Client\ApiClient;
use \Swagger\Client\ApiException;
use \Swagger\Client\Configuration;
use \Swagger\Client\ObjectSerializer;

/**
 * SchemaApi Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class SchemaApi
{
    /**
     * API Client
     *
     * @var \Swagger\Client\ApiClient instance of the ApiClient
     */
    protected $apiClient;

    /**
     * Constructor
     *
     * @param \Swagger\Client\ApiClient|null $apiClient The api client to use
     */
    public function __construct(\Swagger\Client\ApiClient $apiClient = null)
    {
        if ($apiClient === null) {
            $apiClient = new ApiClient();
        }

        $this->apiClient = $apiClient;
    }

    /**
     * Get API client
     *
     * @return \Swagger\Client\ApiClient get the API client
     */
    public function getApiClient()
    {
        return $this->apiClient;
    }

    /**
     * Set the API client
     *
     * @param \Swagger\Client\ApiClient $apiClient set the API client
     *
     * @return SchemaApi
     */
    public function setApiClient(\Swagger\Client\ApiClient $apiClient)
    {
        $this->apiClient = $apiClient;
        return $this;
    }

    /**
     * Operation addIdentity
     *
     * @param string $identity_type  (required)
     * @param string $author_name  (required)
     * @param string $author_email  (required)
     * @param \Swagger\Client\Model\JsonValue $value  (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return string
     */
    public function addIdentity($identity_type, $author_name, $author_email, $value)
    {
        list($response) = $this->addIdentityWithHttpInfo($identity_type, $author_name, $author_email, $value);
        return $response;
    }

    /**
     * Operation addIdentityWithHttpInfo
     *
     * @param string $identity_type  (required)
     * @param string $author_name  (required)
     * @param string $author_email  (required)
     * @param \Swagger\Client\Model\JsonValue $value  (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of string, HTTP status code, HTTP response headers (array of strings)
     */
    public function addIdentityWithHttpInfo($identity_type, $author_name, $author_email, $value)
    {
        // verify the required parameter 'identity_type' is set
        if ($identity_type === null) {
            throw new \InvalidArgumentException('Missing the required parameter $identity_type when calling addIdentity');
        }
        // verify the required parameter 'author_name' is set
        if ($author_name === null) {
            throw new \InvalidArgumentException('Missing the required parameter $author_name when calling addIdentity');
        }
        // verify the required parameter 'author_email' is set
        if ($author_email === null) {
            throw new \InvalidArgumentException('Missing the required parameter $author_email when calling addIdentity');
        }
        // verify the required parameter 'value' is set
        if ($value === null) {
            throw new \InvalidArgumentException('Missing the required parameter $value when calling addIdentity');
        }
        // parse inputs
        $resourcePath = "/schemas/{identityType}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['text/html']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // query params
        if ($author_name !== null) {
            $queryParams['author.name'] = $this->apiClient->getSerializer()->toQueryValue($author_name);
        }
        // query params
        if ($author_email !== null) {
            $queryParams['author.email'] = $this->apiClient->getSerializer()->toQueryValue($author_email);
        }
        // path params
        if ($identity_type !== null) {
            $resourcePath = str_replace(
                "{" . "identityType" . "}",
                $this->apiClient->getSerializer()->toPathValue($identity_type),
                $resourcePath
            );
        }
        // body params
        $_tempBody = null;
        if (isset($value)) {
            $_tempBody = $value;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                'string',
                '/schemas/{identityType}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, 'string', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), 'string', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation deleteIdentity
     *
     * @param string $identity_type  (required)
     * @param string $author_name  (required)
     * @param string $author_email  (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return string
     */
    public function deleteIdentity($identity_type, $author_name, $author_email)
    {
        list($response) = $this->deleteIdentityWithHttpInfo($identity_type, $author_name, $author_email);
        return $response;
    }

    /**
     * Operation deleteIdentityWithHttpInfo
     *
     * @param string $identity_type  (required)
     * @param string $author_name  (required)
     * @param string $author_email  (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of string, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteIdentityWithHttpInfo($identity_type, $author_name, $author_email)
    {
        // verify the required parameter 'identity_type' is set
        if ($identity_type === null) {
            throw new \InvalidArgumentException('Missing the required parameter $identity_type when calling deleteIdentity');
        }
        // verify the required parameter 'author_name' is set
        if ($author_name === null) {
            throw new \InvalidArgumentException('Missing the required parameter $author_name when calling deleteIdentity');
        }
        // verify the required parameter 'author_email' is set
        if ($author_email === null) {
            throw new \InvalidArgumentException('Missing the required parameter $author_email when calling deleteIdentity');
        }
        // parse inputs
        $resourcePath = "/schemas/{identityType}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['text/html']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // query params
        if ($author_name !== null) {
            $queryParams['author.name'] = $this->apiClient->getSerializer()->toQueryValue($author_name);
        }
        // query params
        if ($author_email !== null) {
            $queryParams['author.email'] = $this->apiClient->getSerializer()->toQueryValue($author_email);
        }
        // path params
        if ($identity_type !== null) {
            $resourcePath = str_replace(
                "{" . "identityType" . "}",
                $this->apiClient->getSerializer()->toPathValue($identity_type),
                $resourcePath
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams,
                'string',
                '/schemas/{identityType}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, 'string', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), 'string', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation listSchemas
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return object[]
     */
    public function listSchemas()
    {
        list($response) = $this->listSchemasWithHttpInfo();
        return $response;
    }

    /**
     * Operation listSchemasWithHttpInfo
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of object[], HTTP status code, HTTP response headers (array of strings)
     */
    public function listSchemasWithHttpInfo()
    {
        // parse inputs
        $resourcePath = "/schemas";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);


        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                'object[]',
                '/schemas'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, 'object[]', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), 'object[]', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation patchIdentity
     *
     * @param string $identity_type  (required)
     * @param string $author_name  (required)
     * @param string $author_email  (required)
     * @param \Swagger\Client\Model\JsonValue $patch  (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return string
     */
    public function patchIdentity($identity_type, $author_name, $author_email, $patch)
    {
        list($response) = $this->patchIdentityWithHttpInfo($identity_type, $author_name, $author_email, $patch);
        return $response;
    }

    /**
     * Operation patchIdentityWithHttpInfo
     *
     * @param string $identity_type  (required)
     * @param string $author_name  (required)
     * @param string $author_email  (required)
     * @param \Swagger\Client\Model\JsonValue $patch  (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of string, HTTP status code, HTTP response headers (array of strings)
     */
    public function patchIdentityWithHttpInfo($identity_type, $author_name, $author_email, $patch)
    {
        // verify the required parameter 'identity_type' is set
        if ($identity_type === null) {
            throw new \InvalidArgumentException('Missing the required parameter $identity_type when calling patchIdentity');
        }
        // verify the required parameter 'author_name' is set
        if ($author_name === null) {
            throw new \InvalidArgumentException('Missing the required parameter $author_name when calling patchIdentity');
        }
        // verify the required parameter 'author_email' is set
        if ($author_email === null) {
            throw new \InvalidArgumentException('Missing the required parameter $author_email when calling patchIdentity');
        }
        // verify the required parameter 'patch' is set
        if ($patch === null) {
            throw new \InvalidArgumentException('Missing the required parameter $patch when calling patchIdentity');
        }
        // parse inputs
        $resourcePath = "/schemas/{identityType}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['text/html']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // query params
        if ($author_name !== null) {
            $queryParams['author.name'] = $this->apiClient->getSerializer()->toQueryValue($author_name);
        }
        // query params
        if ($author_email !== null) {
            $queryParams['author.email'] = $this->apiClient->getSerializer()->toQueryValue($author_email);
        }
        // path params
        if ($identity_type !== null) {
            $resourcePath = str_replace(
                "{" . "identityType" . "}",
                $this->apiClient->getSerializer()->toPathValue($identity_type),
                $resourcePath
            );
        }
        // body params
        $_tempBody = null;
        if (isset($patch)) {
            $_tempBody = $patch;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PATCH',
                $queryParams,
                $httpBody,
                $headerParams,
                'string',
                '/schemas/{identityType}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, 'string', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), 'string', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }
}
